{-# LANGUAGE OverloadedStrings #-}
module TensorSafe.Compile.Expr where

import           Data.Map
import           Data.Text.Lazy as T
import           Formatting
import           Text.Casing    (camel, quietSnake)


data DLayer = DConv2D
            | DDense
            | DDropout
            | DFlatten
            | DLSTM
            | DMaxPooling
            | DRelu
            | DActivation
            deriving Show


data CNetwork = CNSequence CNetwork
              | CNCons CNetwork CNetwork
              | CNLayer DLayer (Map String String)
              | CNReturn  -- End of initial sequence network
              | CNNil     -- End of possible nested sequence networks
              deriving Show


data JavaScript = JavaScript deriving Show
data Python = Python deriving Show

--
--
-- | Defines how are the layers going to be translated to the domain language
class LayerGenerator l where
    generateName :: l -> DLayer -> String

instance LayerGenerator JavaScript where
    generateName _ DConv2D     = "conv2d"
    generateName _ DDense      = "dense"
    generateName _ DDropout    = "dropout"
    generateName _ DFlatten    = "flatten"
    generateName _ DLSTM       = "lstm"
    generateName _ DMaxPooling = "maxPooling2d"
    generateName _ DRelu       = "reLU"
    generateName _ DActivation = "activation"

instance LayerGenerator Python where
    generateName _ DConv2D     = "Conv2D"
    generateName _ DDense      = "Dense"
    generateName _ DDropout    = "Dropout"
    generateName _ DFlatten    = "Flatten"
    generateName _ DLSTM       = "LSTM"
    generateName _ DMaxPooling = "MaxPool2D"
    generateName _ DRelu       = "ReLu"
    generateName _ DActivation = "Activation"

--
--
-- | Class that defines which languages are supported for CNetworks generation to text
class Generator l where
    generate :: l -> CNetwork -> Text

    generateFile :: l -> CNetwork -> Text

--
--
--  | Instance for JavaScript generation
instance Generator JavaScript where
    generate l =
        T.intercalate "\n" . evalJS
        where
            evalJS :: CNetwork -> [Text]
            evalJS (CNSequence cn)  = ["var model = tf.sequential();"] ++ evalJS cn
            evalJS (CNCons cn1 cn2) = (evalJS cn1) ++ (evalJS cn2)
            evalJS CNNil = []
            evalJS CNReturn = []
            evalJS (CNLayer layer params) =
                [format
                    ("model.add(tf.layers." % string % "(" % string % "));")
                    (generateName l layer)
                    (paramsToJS params)
                ]

    generateFile l cn =
        startCode `append` (generate l cn) `append` endCode
        where
            startCode :: Text
            startCode = T.intercalate "\n"
                [ "// Autogenerated code"
                , "var tf = require(\"@tensorflow/tfjs\");"
                , "function model() {"
                , "\n"
                ]

            endCode :: Text
            endCode = T.intercalate "\n"
                [ "\n"
                , "return model;"
                , "}"
                , "\n"
                , "module.exports = model();"
                ]


paramsToJS :: Map String String -> String
paramsToJS m =
    (foldrWithKey showParam "{ " m) ++ "}"
    where
        showParam :: String -> String -> String -> String
        showParam key value accum = accum ++ (camel key) ++ ": " ++ value ++ ", "


--
--
-- | Instance for Python generation
instance Generator Python where
    generate l =
        T.intercalate "\n" . evalPy
        where
            evalPy :: CNetwork -> [Text]
            evalPy (CNSequence cn)  = ["model = tf.keras.models.Sequential()"] ++ evalPy cn
            evalPy (CNCons cn1 cn2) = (evalPy cn1) ++ (evalPy cn2)
            evalPy CNNil = []
            evalPy CNReturn = []
            evalPy (CNLayer layer params) =
                [format
                    ("model.add(tf.layers." % string % "(" % string % "))")
                    (generateName l layer)
                    (paramsToPython params)]

    generateFile l cn =
        startCode `append` (generate l cn)
        where
            startCode :: Text
            startCode = T.intercalate "\n"
                [ "// Autogenerated code"
                , "import tensorflow as tf"
                , "\n"
                ]


paramsToPython :: Map String String -> String
paramsToPython =
    foldrWithKey showParam ""
    where
        showParam :: String -> String -> String -> String
        showParam key value accum = accum ++ (transform key) ++ "=" ++ value ++ ", "

        -- | Translates keys to python keys of layers
        --
        --   There are some minor changes in names of keys for layers with respect to JS.
        --   Those changes should be delcared here. For most of the keys, transforming them to
        --   snake case does the trick.
        transform :: String -> String
        transform key
            | key == "inputDim" = "input_shape"
            | otherwise         = quietSnake key
